rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return request.auth != null && 
             user != null && 
             user.data != null && 
             ('role' in user.data) && 
             user.data.role == 'ADMIN';
    }

    // Função para verificar se é uma Cloud Function
    function isCloudFunction() {
      return request.auth != null &&
             request.auth.token != null &&
             request.auth.token.firebase != null &&
             request.auth.token.firebase.sign_in_provider == 'google.com' &&
             request.auth.token.firebase.sign_in_attributes.email.matches('.*@system.gserviceaccount.com');
    }

    // Função para verificar se é um parceiro
    function isPartner() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/partners/$(request.auth.uid));
    }

    // Função para verificar se é uma atualização apenas dos campos usedBy e updatedAt
    function isOnlyUsageUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['usedBy', 'updatedAt']);
    }

    // ---------------- Regras globais ----------------



    // Regra geral para leitura (mas não para notificações de usuários)
    match /{document=**} {
      allow read: if true;
    }

    match /advertisements/{advertisementId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    match /billing_control/{billingId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    match /invoices/{invoiceId} {
      allow read: if isAuthenticated() && isAdmin();
      allow create, update: if isAdmin() || isCloudFunction();
      allow delete: if isAdmin();
    }

    match /coupons/{couponId} {
      allow read: if true;
      allow create, delete: if isAuthenticated();
      // ✅ CORREÇÃO: Permitir que usuários autenticados atualizem apenas usedBy e updatedAt
      allow update: if isAuthenticated() && isOnlyUsageUpdate();
    }

    match /banners/{bannerId} {
      allow read: if true;
      allow create, update, delete: if isAuthenticated();
    }

    match /devices/{deviceId} {
      allow read, create, update, delete: if isAuthenticated();
    }

    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow create, update, delete: if isAuthenticated();

      match /subcategories/{subcategoryId} {
        allow read: if true;
        allow create, update, delete: if isAuthenticated();
      }
    }

    match /states/{stateId} {
      allow read: if true;
      allow write: if isAuthenticated();

      match /cities/{cityId} {
        allow read: if true;
        allow write: if isAuthenticated();

        match /neighborhoods/{neighborhoodId} {
          allow read: if true;
          allow write: if isAuthenticated();
        }
      }
    }

    match /cities/{cityId} {
      allow read: if true;
    }

    // Regras para a coleção admin
    match /admin/{adminId} {
      allow read: if true;
      allow write: if isAdmin();
      
      match /advertisements/{advertisementId} {
        allow read: if true;
        allow write: if isAdmin();
      }
    }

    // ✅ ADICIONE ESTA REGRA AQUI (FORA DOS PARTNERS)
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        resource.data.partnerId == request.auth.uid || isAdmin() || isCloudFunction()
      );
      allow create: if isAuthenticated() && request.resource.data.partnerId == request.auth.uid;
      allow update: if isAdmin() || isCloudFunction();
      allow delete: if isAdmin();
    }

    // ---------------- Regras para usuários ----------------

    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isAuthenticated();
      allow delete: if isOwner(userId);

      match /usedCoupons/{couponId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isOwner(userId);
      }

      match /favorites/{favoriteId} {
        allow read: if true;
        allow create, update, delete: if isOwner(userId);
      }

      match /orders/{orderId} {
        allow read: if true;
        allow create, update, delete: if isAuthenticated();

        match /review/{reviewId} {
          allow read: if true;
          allow create, update, delete: if isAuthenticated();
        }
      }

      match /addresses/{addressId} {
        allow read: if true;
        allow create, update, delete: if isOwner(userId);
      }

      // Regra específica para notificações de usuários
      match /notifications/{notificationId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() || isCloudFunction() || isPartner();
        allow update, delete: if isOwner(userId) || isCloudFunction();
      }
    }

    // ---------------- Regras para parceiros ----------------

    match /partners/{partnerId} {
      allow read: if true;
      allow create: if isOwner(partnerId);
      allow update: if isOwner(partnerId) || (
        isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isActive', 'lastUpdated'])
      );
      allow delete: if isOwner(partnerId);

      match /billing_control/{docId} {
        allow read: if isAuthenticated() && (isOwner(partnerId) || isAdmin());
        allow create, update, delete: if isAdmin();
      }
      
      match /saved_cards/{cardId} {
        allow read, create, update, delete: if isOwner(partnerId);
      }

      match /invoices/{invoiceId} {
        allow read: if isAuthenticated() && (isOwner(partnerId) || isAdmin() || isCloudFunction());
        allow create, update: if isOwner(partnerId) || isAdmin() || isCloudFunction();
        allow delete: if isAdmin();
      }

      match /app_fees/{feeId} {
        allow read: if isAuthenticated() && (isOwner(partnerId) || isAdmin() || isCloudFunction());
        allow create, update: if isOwner(partnerId) || isAdmin() || isCloudFunction();
        allow delete: if isAdmin();
      }

      match /coupons/{couponId} {
        allow read: if true;
        allow create, delete: if isOwner(partnerId);
        // ✅ CORREÇÃO: Permitir que usuários autenticados atualizem apenas usedBy e updatedAt
        allow update: if isOwner(partnerId) || (isAuthenticated() && isOnlyUsageUpdate());
      }

      match /delivery_fees/{feeId} {
        allow read: if true;
        allow create, update, delete: if isOwner(partnerId);
      }

      match /fees/{feeId} {
        allow read: if true;
        allow create, update, delete: if isOwner(partnerId);
      }

      match /neighborhoods_fees/{feeId} {
        allow read: if true;
        allow create, update, delete: if isOwner(partnerId);
      }

      match /orders/{orderId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated();

        match /review/{reviewId} {
          allow read: if true;
          allow create: if isAuthenticated();
          allow update, delete: if isAuthenticated();
        }
      }

      match /products/{productId} {
        allow read: if true;
        allow create, update, delete: if isOwner(partnerId);
      }

      match /categories/{categoryId} {
        allow read: if true;
        allow create, update, delete: if isOwner(partnerId);
      }

      match /notifications/{notificationId} {
        allow read: if isAuthenticated() && isOwner(partnerId);
        allow create: if isAuthenticated() || isCloudFunction(); // Permitir que usuários autenticados e Cloud Functions criem notificações
        allow update, delete: if isAuthenticated() && isOwner(partnerId);
      }

      match /usedCoupons/{couponId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isOwner(partnerId);
      }
    }
  }
} 